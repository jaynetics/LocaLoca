import Foundation

struct Locale {
    var code: String

    var nameWithFlag: String {
        if let flag = emojiFlag { return "\(flag) \(code)" }
        else                    { return code }
    }
    
    // based on Flag.swift from LocalizationEditor by Igor Kulman
    // https://github.com/igorkulman/iOSLocalizationEditor
    private var emojiFlag: String? {
        let language = String(code.split(separator: "-").first ?? "")
        switch language {
        case "ar": return "ðŸ‡±ðŸ‡§"
        case "ca": return nil // no emoji flag
        case "cs": return "ðŸ‡¨ðŸ‡¿"
        case "da": return "ðŸ‡©ðŸ‡°"
        case "de": return "ðŸ‡©ðŸ‡ª"
        case "el": return "ðŸ‡¬ðŸ‡·"
        case "en": return "ðŸ‡¬ðŸ‡§"
        case "es": return "ðŸ‡ªðŸ‡¸"
        case "fi": return "ðŸ‡«ðŸ‡®"
        case "fr": return "ðŸ‡«ðŸ‡·"
        case "he": return "ðŸ‡®ðŸ‡±"
        case "hi": return "ðŸ‡®ðŸ‡³"
        case "hr": return "ðŸ‡­ðŸ‡·"
        case "hu": return "ðŸ‡­ðŸ‡º"
        case "id": return "ðŸ‡®ðŸ‡©"
        case "it": return "ðŸ‡®ðŸ‡¹"
        case "ja": return "ðŸ‡¯ðŸ‡µ"
        case "ms": return "ðŸ‡²ðŸ‡¾"
        case "nb": return "ðŸ‡³ðŸ‡´"
        case "nl": return "ðŸ‡³ðŸ‡±"
        case "pl": return "ðŸ‡µðŸ‡±"
        case "pt": return "ðŸ‡µðŸ‡¹"
        case "ro": return "ðŸ‡·ðŸ‡´"
        case "ru": return "ðŸ‡·ðŸ‡º"
        case "sk": return "ðŸ‡¸ðŸ‡°"
        case "sv": return "ðŸ‡¸ðŸ‡ª"
        case "th": return "ðŸ‡¹ðŸ‡­"
        case "tr": return "ðŸ‡¹ðŸ‡·"
        case "uk": return "ðŸ‡ºðŸ‡¦"
        case "vi": return "ðŸ‡»ðŸ‡³"
        case "zh": return "ðŸ‡¨ðŸ‡³"
        default:   return emojiFlag(countryCode: language)
        }
    }
    
    private func emojiFlag(countryCode: String) -> String? {
        guard countryCode.count == 2 else { return nil }
        var string = ""
        for unicodeScalar in countryCode.uppercased().unicodeScalars {
            if let scalar = UnicodeScalar(0x1F1A5 + unicodeScalar.value) {
                string.append(String(scalar))
            }
        }
        return string.isEmpty ? nil : string
    }
}
